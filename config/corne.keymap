#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    chain-length = <0>;

    // chain-length = <27>;
    // 21 backlight + 6 glowlight
};

#define TAPPING_TERM 200

/ {
    behaviors {
        /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        Space {
            bindings = <&kp SPACE>;
            key-positions = <29 28>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        Capslock {
            bindings = <&kp CLCK>;
            key-positions = <5 6>;
        };
    };

    macros {
        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };

        git_commit_all: git_commit_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "GIT_COMMIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R             &kp T        &kp Y          &kp U  &kp I      &kp O    &kp P      &kp ESC
&trans          &kp A  &kp S  &kp D         &kp F             &kp G        &kp H          &kp J  &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V             &kp B        &kp N          &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                              &kp LEFT_ALT  &kp LEFT_CONTROL  &kp SPACE    &kp BACKSPACE  &mo 2  &mo 1
            >;
        };

        symbols_layer {
            label = "SYMBOLS";
            bindings = <
&kp TAB         &kp N1        &kp N2        &kp N3             &kp N4        &kp N5             &kp N6  &kp N7    &kp N8     &kp N9     &kp N0         &kp ESC
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4       &trans  &kp APOS  &kp LBKT   &kp RBKT   &kp BACKSLASH  &kp ENTER
&kp LEFT_SHIFT  &bl BL_TOG    &bl BL_INC    &ext_power EP_TOG  &bl BL_CYCLE  &rgb_ug RGB_TOG    &trans  &trans    &kp GRAVE  &kp MINUS  &kp EQUAL      &kp RIGHT_SHIFT
                                            &trans             &trans        &trans             &trans  &trans    &trans
            >;
        };

        arrow {
            bindings = <
&trans  &trans  &kp HOME  &kp UP_ARROW    &kp END           &trans    &trans  &trans  &kp PAGE_UP    &trans  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW   &trans    &trans  &trans  &kp PAGE_DOWN  &trans  &trans  &trans
&trans  &trans  &trans    &trans          &trans            &trans    &trans  &trans  &trans         &trans  &trans  &trans
                          &kp LEFT_ALT    &kp LEFT_CONTROL  &trans    &trans  &trans  &trans
            >;

            label = "arrow";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <1 2>;
            then-layer = <2>;
        };
    };
};
